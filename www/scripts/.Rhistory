geom_point() +
stat_ellipse(geom="polygon", aes(fill = specie), alpha = 0.2, show.legend = FALSE, level = 0.95) +
xlab(paste("PC 1 ", round(pca$eig[,2],1)[1], "%")) +
ylab(paste("PC 2 ", round(pca$eig[,2],1)[2], "%"))
runApp('D:/Gap_analysis_UI')
ggplot(data = df_pca, aes(x = Dim.1, y = Dim.2, color = specie)) +
geom_point() +
stat_ellipse(geom="polygon", aes(fill = specie), alpha = 0.2, show.legend = FALSE, level = 0.95) +
xlab(paste("PC1 ", round(pca$eig[,2],1)[1], "%")) +
ylab(paste("PC2 ", round(pca$eig[,2],1)[2], "%"))
ggplot(data = df_pca, aes(x = Dim.1, y = Dim.2, color = specie)) +
geom_point() +
stat_ellipse(geom="polygon", aes(fill = specie), alpha = 0.2, show.legend = FALSE, level = 0.95) +
xlab(paste("PC1 ", round(pca$eig[,2],1)[1], "%")) +
ylab(paste("PC2 ", round(pca$eig[,2],1)[2], "%")) +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill= "transparent"))
ggplot(data = df_pca, aes(x = Dim.1, y = Dim.2, color = specie)) +
geom_point() +
stat_ellipse(geom="polygon", aes(fill = specie), alpha = 0.2, show.legend = FALSE, level = 0.95) +
geom_hline(yintercept = 0, lty = 2)+
geom_vline(xintercept = 0, lty = 2)+
xlab(paste("PC1 ", round(pca$eig[,2],1)[1], "%")) +
ylab(paste("PC2 ", round(pca$eig[,2],1)[2], "%")) +
theme_minimal() +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill= "transparent"))
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
x
data(Andrew)
Andrew
x%>%
dplyr::select(ensemble:Longitude) %>%
dplyr::mutate(LatLon = paste0(Latitude, ":", Longitude))
dt <- x %>%
dplyr::select(ensemble:Longitude) %>%
dplyr::mutate(LatLon = paste0(Latitude, ":", Longitude))
gvisMap(dt,
locationvar = "LatLon",
options = list(width=400,
height=300,
title = "Classes counts"))
plot(gvisMap(dt,
locationvar = "LatLon",
options = list(width=400,
height=300,
title = "Classes counts")))
df <- data.frame(Postcode=c("EC3M 7HA", "EC2P 2EJ"),
Tip=c("<a href='https://www.lloyds.com'>Lloyd's</a>",
"<a href='https://www.guildhall.cityoflondon.gov.uk/'>Guildhall</a>"))
df
M3 <- gvisMap(df, "Postcode", "Tip",
options=list(showTip=TRUE, mapType='normal',
enableScrollWheel=TRUE,
icons=paste0("{",
"'default': {'normal': 'https://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'https://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
plot(M3)
icons=paste0("{",
"'default': {'normal': 'https://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'https://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")
icons
df
runApp('D:/Gap_analysis_UI')
x <-raster("Z:/gap_analysis_landraces/runs/input_data/mask/mask_wheat_custom.tif")
crs(x)
proj4string("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
coor_sys <- crs("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
is(coor_sys)
is(crs(x))
dt
x <- dt
coordinates(x) <- ~Latitude+Longitude
plot(x)
x
crs(x) <- coor_sys
x
quakes1 <- quakes[1:10,]
leafIcons <- icons(
iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/examples/custom-icons/leaf-green.png",
"http://leafletjs.com/examples/custom-icons/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leafIcons
oceanIcons <- iconList(
ship = makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18),
pirate = makeIcon("danger-24.png", "danger-24@2x.png", 24, 24)
)
oceanIcons
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
df
data.frame(df)
oceanIcons[df@data$type]
dt$ensemble
colorFactor("Set1", domain = unique(dt$ensemble))
pal <- colorFactor("Set1", domain = unique(dt$ensemble))
pal
pal <- colorFactor("Set1", domain = unique(dt$ensemble))
pal
pal <- colorFactor(c("red", "blue"), domain = unique(dt$ensemble))
pal
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = x, color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
x
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = 5,color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = 10,color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = 100,color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = ~100,color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = rep(100, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
rep(100, nrow(dt))
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = rep(1000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = ~ifelse(ensemble == "andean", 6, 10),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCirclesMarkers(data = dt, radius = ~ifelse(ensemble == "andean", 6, 10),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircleMarkers(data = dt, radius = ~ifelse(ensemble == "andean", 6, 10),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
pal <- colorFactor(palette = "Set1", domain = unique(dt$ensemble))
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircleMarkers(data = dt, radius = ~ifelse(ensemble == "andean", 6, 10),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = ~ifelse(ensemble == "andean", 6, 6),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
runApp('D:/Gap_analysis_UI')
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius = ~ifelse(ensemble == "andean", 1000, 6),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.5 )
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
x
x@coords
x@coords.nrs
x@bbox
x@proj4string
getSpPPolygonsLabptSlots(x)
coordinates(x)
x@bbox
is(x@bbox)
bbx <- x@bbox
bbx <- x@bbox
colSums(bbx)
colSums(bbx)/2
cent <- colSums(bbx)/2
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
cent[1]
leaflet() %>%
setView(lat= 0, lng = 0, zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
is(cent)
cent[1]
cent <- as.numeric(colSums(bbx)/2)
cent
bbx
cent <- as.numeric(rowSums(bbx)/2)
cent
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 1) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 8) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 4) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt, radius =  ~rep(10000, nrow(dt)),color = ~pal(ensemble), stroke = F, fillOpacity = 0.8 )
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend("bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend("bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt, position = "bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
leaflet((data = dt) %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend( position = "bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
leaflet(data = dt) %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend( position = "bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt, position = "bottomright", pal = pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
dt
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright", pal = ~pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
dt
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble))
ddLegend(data = dt,
position = "bottomright", pal = ~pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
addLegend(data = dt,
position = "bottomright", pal = ~pal(ensemble), values = ~unique(ensemble),
title = "Class names",
opacity = 0.8)
unique(dt$ensemble)
addLegend
attr(pal, "colorType", exact = TRUE)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
pal = ~pal(ensemble),
values = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
attr(pal, "colorType", exact = TRUE)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(ensemble),
values = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
pal(dt$ensemble)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(unique(ensemble)),
values = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
pal(unique(dt$ensemble))
factor(unique(dt$ensemble)
)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(10000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(unique(ensemble)),
labels = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
leaflet() %>%
setView(lat= cent[1], lng = cent[2], zoom = 3) %>%
addTiles(options = providerTileOptions(noWrap = TRUE) )%>%
addCircles(data = dt,
radius =  ~rep(20000, nrow(dt)),
color = ~pal(ensemble),
stroke = F,
fillOpacity = 0.8,
label = ~as.character(ensemble)) %>%
addLegend(data = dt,
position = "bottomright",
colors = ~pal(unique(ensemble)),
labels = ~factor(unique(ensemble)),
title = "Class names",
opacity = 0.8)
runApp('D:/Gap_analysis_UI')
dt
coordinates(x) <- ~Latitude+Longitude
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
344033.42/2
shiny::runApp('D:/Gap_analysis_UI')
shinyWidgetsGallery()
shiny::runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
Sys.info()
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
require(maptools)
require(leaflet)
require(leaflet.extras)
leaflet() %>% addStyleEditor()
leaflet() %>%addTiles() %>%addStyleEditor()
runApp('D:/Gap_analysis_UI')
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
Sys.getenv("HOME")
Sys.getenv("HOME")
Sys.getenv("HOMEDRIVE")
Sys.getenv()
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
x <- list()
x$numero
x
runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
shiny::runApp('D:/Gap_analysis_UI')
ui <- fluidPage(
HTML('<iframe width="560" height="315" src="https://www.youtube.com/embed/T1-k7VYwsHg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>')
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
