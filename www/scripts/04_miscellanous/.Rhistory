install.packages("xlsx")
install.packages(c("dismo", "geosphere", "ggmap", "microbenchmark", "pracma", "RCurl", "RJSONIO"))
install.packages(c("ncdf4", "plspm", "reshape", "rmapshaper", "rsconnect"))
# Load Global shapefile
shp <- raster::shapefile("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/runs/input_data/shapefiles/shp/all_countries.shp"); global<-as.data.frame(shp)
library(raster)
# Iterate by country
countries <- shp@data$ISO3 %>% as.character()
pacman::p_load(raster, tidyverse, sp)
# Iterate by country
countries <- shp@data$ISO3 %>% as.character()
countries
mask_dir <- "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/runs/input/mask"
crop     <- "wheat_durum"
classes  <- c("g1", "g2")
level    <- "runs_2019_07_environmental_groups"
region   <- "wheat_custom"
mask_dir <- "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/runs/input/mask"
# Results directory
results_dir <- "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/runs/results"
# Load packages
library(pacman)
pacman::p_load(raster, tidyverse, sp)
# Load mask
msk <- raster::raster(paste0(mask_dir,"/mask_",region,".tif" ))
mask_dir <- "//dapadfs/Workspace_cluster_9/gap_analysis_landraces/runs/input_data/mask"
# Load mask
msk <- raster::raster(paste0(mask_dir,"/mask_",region,".tif" ))
plot(msk)
sdm_models_1 <- lapply(1:length(classes), function(i){
sdm_models<- raster(paste0(results_dir, "/", crop, "/", level, "/", classes[i], "/", region, "/prj_models/", classes[i],"_prj_median.tif"))
sdm_models[which(sdm_models[] != 0)]<-1
sdm_models[is.na(sdm_models[])]<-0
return(sdm_models)
})
sdm_models <- raster::stack(sdm_models_1)
sdm_models <- sum(sdm_models)
sdm_models <- raster::crop(sdm_models, msk)
sdm_models <- raster::mask(sdm_models, msk)
sdm_models[which(sdm_models[] == 0)] <- NA
# Load final gap maps
final_gap_rast<-lapply(1:length(classes), function(i){
final_gap_rast1 <- raster(paste0(results_dir, "/", crop, "/", level, "/", classes[i], "/", region, "/gap_models/gap_class_final.tif"))
final_gap_rast1[which(final_gap_rast1[] != 2)] <- 0
final_gap_rast1[which(final_gap_rast1[] == 2)] <- 1
final_gap_rast1[which(is.na(final_gap_rast1[]))] <- 0
final_gap_rast1<-crop(final_gap_rast1, sdm_models)
final_gap_rast1<-mask(final_gap_rast1, sdm_models)
return(final_gap_rast1)
})
final_gap_rast_1 <- raster::stack(final_gap_rast)
final_gap_rast_1 <- sum(final_gap_rast_1)
out1 <- paste0(results_dir,"/",crop,"/", level, "/model_final_", crop, ".tif")
if(!file.exists(out1)){
raster::writeRaster(sdm_models, out1, overwrite = TRUE)
}
out2 <- paste0(results_dir,"/",crop,"/", level, "/gap_final_", crop,".tif")
if(!file.exists(out2)){
raster::writeRaster(final_gap_rast_1, out2, overwrite = TRUE)
}; rm(out1, out2)
gc()
# Load Global shapefile
shp <- raster::shapefile("//dapadfs/Workspace_cluster_9/gap_analysis_landraces/runs/input_data/shapefiles/shp/all_countries.shp"); global<-as.data.frame(shp)
# Iterate by country
countries <- shp@data$ISO3 %>% iconv(., "UTF-8", "latin1") %>% as.character()
countries
i=1
shp_new <- shp[which(shp@data$ISO3 == countries[i]),]
plot(shp_new)
?rasterize
x <- raster::rasterize(shp_new, msk)
plot(x)
final_gap_rast_1
x <- final_gap_rast_1 %>% raster::crop(shp_new) %>% raster::mask(mask = shp_new)
plot(x)
x <- msk %>% raster::crop(shp_new) %>% raster::mask(mask = shp_new)
plot(x)
c_area  <- raster::area(country)
country <- msk %>% raster::crop(shp_new) %>% raster::mask(mask = shp_new)
c_area  <- raster::area(country)
plot(c_area)
c_area  <- country %>% raster::area() %>% raster::mask()
c_area  <- country %>% raster::area() %>% raster::mask(mask = country)
plot(c_area)
final_gap_rast_1
table(final_gap_rast_1[])
plot(c_area)
final_gap_rast_1
crop_gaps <- final_gap_rast_1
crop_gaps[which(crop_gaps[] == 0)] <- NA
crop_gaps[which(!is.na(crop_gaps[]))] <- 1
plot(crop_gaps)
crop_gaps %>% raster::crop(country) %>% raster::mask(mask = country) %>% plot()
crop_gaps <- crop_gaps %>% raster::crop(country) %>% raster::mask(mask = country)
c_area * crop_gaps
sum(c_area * crop_gaps, na.rm = T)
abbreviate("country", 4)
cntr_gaps <- c_area * crop_gaps
plot(cntr_gaps)
sum(cntr_gaps[], na.rm = T)
countries[1]
shp@data$ENGLISH
shp@data$ENGLISH %>% iconv(., "UTF-8", "latin1")
raster::crop(shp, msk)
x <- raster::crop(shp, msk)
plot(x)
rm(x)
# Iterate by country
countries <- shp@data$ISO3 %>% iconv(., "UTF-8", "latin1") %>% as.character()
gap_area_per_country <- lapply(1:length(countries), function(i){
cat("Extracting values from: ", countries[i], " \n")
# Selecting country from shp file
shp_new <- shp[which(shp@data$ISO3 == countries[i]),]
# Creating raster file for country
country <- msk %>% raster::crop(shp_new) %>% raster::mask(mask = shp_new)
# Obtaining area per pixel for country raster file
c_area  <- country %>% raster::area() %>% raster::mask(mask = country)
crop_gaps <- final_gap_rast_1
crop_gaps[which(crop_gaps[] == 0)] <- NA
crop_gaps[which(!is.na(crop_gaps[]))] <- 1
tryCatch(expr = {
crop_gaps <- crop_gaps %>% raster::crop(country) %>% raster::mask(mask = country)
cntr_gaps <- c_area * crop_gaps
df <- data.frame(ISO3 = countries[i], Area = sum(cntr_gaps[], na.rm = T))
}, error = function(error_cond){
df <- data.frame(ISO3 = countries[i], Area = 0)
})
return(df)
})
i=9
cat("Extracting values from: ", countries[i], " \n")
# Selecting country from shp file
shp_new <- shp[which(shp@data$ISO3 == countries[i]),]
# Creating raster file for country
country <- msk %>% raster::crop(shp_new) %>% raster::mask(mask = shp_new)
